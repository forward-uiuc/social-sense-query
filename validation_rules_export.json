{"_id":{"$oid":"61f761c88c9e5e2d43b99e03"},"rule_name":"Check GET operation","rule_desc":"Check if the operation is of type get","rule_function":"checkfieldExists","rule_parameters":"fieldname:get","rule_path":"$..paths[*]","rule_action":"Prompt","rule_error_msg":"This application does not support operations except GET.","rule_level":"Warn"}
{"_id":{"$oid":"61f762698c9e5e2d43b99e04"},"rule_name":"Check Schema Type","rule_desc":"Checks if schema has a field type","rule_function":"checkfieldExists","rule_parameters":"fieldname:type","rule_path":"$..paths[*][*].parameters[*].schema","rule_action":"Prompt","rule_error_msg":"Missing type field will cause the schema type to be translated to JSON","rule_level":"Warn"}
{"_id":{"$oid":"61f765568c9e5e2d43b99e05"},"rule_name":"Check Success Code","rule_desc":"Check if response contains atleast one 2XX code","rule_function":"checkMatch","rule_parameters":"regexp:2.*","rule_path":"$..paths[*][*].responses","rule_action":"Prompt","rule_error_msg":"Should contain atleast one success code","rule_level":"Warn"}
{"_id":{"$oid":"61f76b23cc44542f0a83ac33"},"rule_name":"Check response content","rule_desc":"Checks if content exists in response","rule_function":"checkfieldExists","rule_parameters":"fieldname:content","rule_path":"$..paths[*][*].responses[*]","rule_action":"Prompt","rule_error_msg":"Add content to response field","rule_level":"Warn"}
{"_id":{"$oid":"61f76c39cc44542f0a83ac34"},"rule_name":"Check Content type","rule_desc":"Check if content type */* does not exist","rule_function":"checkfieldNotExists","rule_parameters":"fieldname:*/*","rule_path":"$..paths[*][*].responses[*].content","rule_action":"Prompt","rule_error_msg":"Change content type to application/json","rule_level":"Warn"}
{"_id":{"$oid":"61f9a8f377578e4d35c83f61"},"rule_name":"Check Response","rule_desc":"Check if response is selected","rule_function":"checkfieldExists","rule_parameters":"fieldname:responses","rule_path":"$..paths[*][*]","rule_action":"Prompt","rule_error_msg":"Select a response","rule_level":"Warn"}
{"_id":{"$oid":"61f9ac8677578e4d35c83f62"},"rule_name":"Check # of response codes","rule_desc":"Checks the length of responses list","rule_function":"checkLength","rule_parameters":"maxSize:1|minSize:1","rule_path":"$..paths[*][*].responses","rule_action":"Prompt","rule_error_msg":"Only one success response code should be selected","rule_level":"Warn"}
{"_id":{"$oid":"61f9af300978b94dbc0462de"},"rule_name":"Check no of responses","rule_desc":"Checks number of response codes","rule_function":"checkLength","rule_parameters":"minSize:1|maxSize:1","rule_path":"$..paths[*][*].responses[*]","rule_action":"Prompt","rule_error_msg":"Only one success code is needed","rule_level":"Warn"}
{"_id":{"$oid":"61f9e2c96b791a51d2845dde"},"rule_name":"Check default response","rule_desc":"Checks if default response does not exist","rule_function":"checkfieldNotExists","rule_parameters":"fieldname:default","rule_path":"$..paths[*][*].responses","rule_action":"Prompt","rule_error_msg":"Default response types are not accepted","rule_level":"Warn"}
{"_id":{"$oid":"62056e8cdb50e05449ad9978"},"rule_name":"CustomTest","rule_desc":"Checking required params","rule_function":"checkCustomFunction","rule_parameters":"customFunctionName:check_version","rule_path":"$..paths[*][*].responses[*]","rule_action":"Prompt","rule_error_msg":"custom rule1  choose required parameters","rule_level":"Warn","rule_custom_code":"from jsonpath_ng import jsonpath, parse\ndef check_required_params(s_value,e_value):\n    jsonpath_expression = parse('$..parameters')\n    match_s=jsonpath_expression.find(s_value)\n    match_e= jsonpath_expression.find(e_value)\n    required_param_list=[]\n    for record in match_e[0].value:\n        required_param_list.append(record[\"name\"])\n    for record in match_s[0].value:\n        if record['required'] == True:\n            # check if it is in list of endpoint param values\n            if record['name'] not in required_param_list:\n                return False\n            \n    return True\n    \n\ndef check_param_exists_source(sourceobj,endpoint_name,endpoint_name_value):\n    jsonpath_expression = parse('$..paths')\n    match=jsonpath_expression.find(sourceobj)\n    \n    for key,value in match[0].value.items():\n        s_endpoint_name = key.replace('}','').replace('{','').split('/')[-1].lower()\n        if s_endpoint_name == endpoint_name:\n            # Return check required params\n            s_endpoint_name_value = value\n            if check_required_params(s_endpoint_name_value,endpoint_name_value) == False:\n                return False\n    \n    \njsonpath_expression = parse('$..paths')\nmatch=jsonpath_expression.find(targetobj)\nfor idx in range(0,len(match)):\n    for key,value in match[idx].value.items():\n        endpoint_name = key.split('/')[-1].replace('}','').replace('{','').lower()\n        endpoint_name_value= value\n        if check_param_exists_source(sourceobj,endpoint_name,endpoint_name_value) == False:\n            print(\"Failure\")\n\nprint(\"Success\")"}
{"_id":{"$oid":"62243247337be72dd06613d8"},"rule_name":"CustomRule2","rule_desc":"Checking custom rule 2","rule_function":"checkCustomFunction","rule_parameters":"customFunctionName:check_schema_type","rule_path":"$..paths","rule_action":"Prompt","rule_error_msg":"custom Rule2: schema type not present","rule_level":"Warn","rule_custom_code":"def check_value(json):\n    for key,value in json.items():\n        if key == \"type\":\n            return True\n    return False\n\ndef get_all_keys(d):\n    for key, value in d.items():\n        if key == \"schema\":\n            if check_value(value) == False:\n                return False\n        if isinstance(value, dict):\n            if get_all_keys(value) == False:\n                return False\n    return True\nif get_all_keys(targetobj):\n    print(\"success\")\nelse:\n    print(\"Failure\")"}
