{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.stackexchange.com/2.0"
    }
  ],
  "info": {
    "description": "Stack Exchange is a network of 130+ Q&A communities including Stack Overflow.\n",
    "title": "StackExchange",
    "version": "2.0",
    "x-apisguru-categories": [
      "collaboration",
      "developer_tools",
      "support"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/http_sstatic.net_stackexchange_img_se-logo.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://raw.githubusercontent.com/APIs-guru/unofficial_openapi_specs/master/stackexchange.com/2.0/openapi.yaml",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "stackexchange.com",
    "x-unofficialSpec": true
  },
  "externalDocs": {
    "url": "https://api.stackexchange.com/"
  },
  "paths": {
    "/access-tokens/{accessTokens}": {
      "get": {
        "description": "Reads the properties for a set of access tokens.\n \n{accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.\n \nThis method returns a list of access_tokens.\n",
        "parameters": [
          {
            "description": "String list (semicolon delimited).",
            "in": "path",
            "name": "accessTokens",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pagesize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "#Discussion\n\nThe Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.\n\nAn application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.\n\nFilters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.\n\nThe motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).\n\n#Safety\n\nFilters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.\n\nNote that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).\n\nWhen using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.\n\n#Built In Filters\n\nThe following filters are built in:\n\ndefault, each type documents which fields are returned under the default filter (for example, answers).\nwithbody, which is default plus the *.body fields\nnone, which is empty\ntotal, which includes just .total\n\n#Compatibility with V1.x\n\nFor ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.\n",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "All API responses are JSON, we do support JSONP with the callback query parameter.\n",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {


                  
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "account_id": {
                      "type": "integer"
                    },
                    "expires_on_date": {
                      "type": "integer"
                    },
                    "scope": {
                      "items": {"a":"bc"},
                      "type": "string"
                    }
                  },
                "type": "object"



                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "bad_parameter   400 An invalid parameter was passed, this includes even \"high level\" parameters like key or site.\n"
          },
          "401": {
            "description": "access_token_required   401 A method that requires an access token (obtained via authentication) was called without one.\n"
          },
          "402": {
            "description": "invalid_access_token   402 An invalid access token was passed to a method.\n"
          },
          "403": {
            "description": "access_denied   403 A method which requires certain permissions was called with an access token that lacks those permissions.\n"
          },
          "404": {
            "description": "no_method   404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.\n"
          },
          "405": {
            "description": "key_required   405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.\n"
          },
          "406": {
            "description": "access_token_compromised   406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.\n"
          },
          "500": {
            "description": "internal_error   500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.\n"
          },
          "502": {
            "description": "throttle_violation   502 An application has violated part of the rate limiting contract, so the request was terminated.\n"
          },
          "503": {
            "description": "temporarily_unavailable   503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.\n"
          }
        }
      }
    },
    "/answers": {
      "get": {
        "description": "Returns all the undeleted answers in the system.\n \nThe sorts accepted by this method operate on the follow fields of the answer object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n\n \nThis method returns a list of answers.\n",
        "parameters": [
          {
            "in": "query",
            "name": "order",
            "schema": {
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          },
          {
            "description": "sort = activity => date\nsort = creation => date\nsort = votes => number\n",
            "in": "query",
            "name": "max",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "sort = activity => date\nsort = creation => date\nsort = votes => number\n",
            "in": "query",
            "name": "min",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "enum": [
                "activity",
                "creation",
                "votes"
              ],
              "type": "string"
            }
          },
          {
            "description": "Unix date.",
            "in": "query",
            "name": "fromdate",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Unix date.",
            "in": "query",
            "name": "todate",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pagesize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "#Discussion\n\nThe Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.\n\nAn application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.\n\nFilters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.\n\nThe motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).\n\n#Safety\n\nFilters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.\n\nNote that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).\n\nWhen using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.\n\n#Built In Filters\n\nThe following filters are built in:\n\ndefault, each type documents which fields are returned under the default filter (for example, answers).\nwithbody, which is default plus the *.body fields\nnone, which is empty\ntotal, which includes just .total\n\n#Compatibility with V1.x\n\nFor ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.\n",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "All API responses are JSON, we do support JSONP with the callback query parameter.\n",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.\n",
            "in": "query",
            "name": "site",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/answers"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \"high level\" parameters like key or site.\n"
          },
          "401": {
            "description": "access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.\n"
          },
          "402": {
            "description": "invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.\n"
          },
          "403": {
            "description": "access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.\n"
          },
          "404": {
            "description": "no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.\n"
          },
          "405": {
            "description": "key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.\n"
          },
          "406": {
            "description": "access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.\n"
          },
          "500": {
            "description": "internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.\n"
          },
          "502": {
            "description": "throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.\n"
          },
          "503": {
            "description": "temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.\n"
          }
        }
      }
    },
    "/labs/2/users/by": {
      "get": {
          "tags": [
              "Users"
          ],
          "summary": "Return details for the specified users",
          "description": "This endpoint returns information about users. Specify users by their username.",
          "operationId": "findUsersByUsername",
          "parameters": [
              {
                  "name": "usernames",
                  "in": "query",
                  "description": "Required . A list of usernames, comma-separated. You can specify up to 100 usernames.",
                  "required": true,
                  "schema": {
                      "type": "string",
                      "items": {
                          "a": "#/components/schemas/UserName"
                      },
                      "minItems": 1,
                      "maxItems": 100
                  },
                  "style": "form",
                  "explode": false
              }
          ],
          "responses": {
              "200": {
                  "description": "The request was successful",
                  "content": {
                      "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "items": {
                                        "a": "#/components/schemas/User"
                                    },
                                    "minItems": 1
                                },
                                "includes": {
                                    "b": "#/components/schemas/Expansions"
                                },
                                "errors": {
                                    "type": "string",
                                    "items": {
                                        "c": "#/components/schemas/Problem"
                                    },
                                    "minItems": 1
                                }
                            }
                          }
                      }
                  }
              },
              "default": {
                  "a": "#/components/responses/HttpErrorResponse"
              }
          }
      }
  }
  },
  "components": {
    "schemas": {
      "access_tokens": {
        "items": {
          "properties": {
            "access_token": {
              "type": "string"
            },
            "account_id": {
              "type": "integer"
            },
            "expires_on_date": {
              "type": "integer"
            },
            "scope": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "string"
      },
      "account_merge": {
        "items": {
          "properties": {
            "merge_date": {
              "type": "integer"
            },
            "new_account_id": {
              "type": "integer"
            },
            "old_account_id": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "type": "string"
      },
      "answers": {
          "properties": {
            "accepted": {
              "type": "boolean"
            },
            "answer_id": {
              "type": "integer"
            },
            "awarded_bounty_amount": {
              "type": "integer"
            },
            "awarded_bounty_users": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "body": {
              "type": "string"
            },
            "body_markdown": {
              "type": "string"
            },
            "can_flag": {
              "type": "boolean"
            },
            "comment_count": {
              "type": "integer"
            },
            "comments": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "community_owned_date": {
              "type": "integer"
            },
            "creation_date": {
              "type": "integer"
            },
            "down_vote_count": {
              "type": "integer"
            },
            "downvoted": {
              "type": "boolean"
            },
            "is_accepted": {
              "type": "boolean"
            },
            "last_activity_date": {
              "type": "integer"
            },
            "last_edit_date": {
              "type": "integer"
            },
            "last_editor": {
              "properties": {
                "accept_rate": {
                  "type": "integer"
                },
                "badge_counts": {
                  "properties": {
                    "bronze": {
                      "type": "integer"
                    },
                    "gold": {
                      "type": "integer"
                    },
                    "silver": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "display_name": {
                  "type": "string"
                },
                "link": {
                  "type": "string"
                },
                "profile_image": {
                  "type": "string"
                },
                "reputation": {
                  "type": "integer"
                },
                "user_id": {
                  "type": "integer"
                },
                "user_type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "link": {
              "type": "string"
            },
            "locked_date": {
              "type": "integer"
            },
            "owner": {
              "properties": {
                "accept_rate": {
                  "type": "integer"
                },
                "badge_counts": {
                  "properties": {
                    "bronze": {
                      "type": "integer"
                    },
                    "gold": {
                      "type": "integer"
                    },
                    "silver": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "display_name": {
                  "type": "string"
                },
                "link": {
                  "type": "string"
                },
                "profile_image": {
                  "type": "string"
                },
                "reputation": {
                  "type": "integer"
                },
                "user_id": {
                  "type": "integer"
                },
                "user_type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "question_id": {
              "type": "integer"
            },
            "score": {
              "type": "integer"
            },
            "share_link": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "title": {
              "type": "string"
            },
            "up_vote_count": {
              "type": "integer"
            },
            "upvoted": {
              "type": "boolean"
            }
          },
          "type": "object"
      }
    },
    "securitySchemes": {
      "oauth_2_0": {
        "description": "The Stack Exchange API offers user authentication via OAuth 2.0, specifically templated after Facebook's implementation. There are two flows, an explicit grant for server side applications and an implicit one for pure browser based ones.\n\n#The explicit OAuth 2.0 flow consists of the following steps:\n1. Send a user to https://stackexchange.com/oauth, with these query string parameters\n- client_id\n- scope\n- redirect_uri - must be under an apps registered domain\n- state - optional\n2. The user approves your app\n3. The user is redirected to redirect_uri, with these query string parameters\n- code\n- state - optional, only returned if provided in the first step\n4. POST (application/x-www-form-urlencoded) the following parameters to https://stackexchange.com/oauth/access_token\n- client_id\n- client_secret\n- code - from the previous step\n- redirect_uri - must be the same as the provided in the first step\nThis request is responded to with either an error (HTTP status code 400) or an access token of the form access_token=...&expires=1234. expires will only be set if scope does not include no_expiry, the use of which is strongly advised against unless your app truly needs perpetual access.\n\n#The implicit OAuth 2.0 flow consists of the following steps:\n\n1. Open a new window at https://stackexchange.com/oauth/dialog, with these query string parameters\n- client_id\n- scope (details)\n- redirect_uri - must be under an apps registered domain\n- state - optional\n2. The user approves your app\n3. The user is redirected to redirect_uri, with these parameters in the hash\n- access_token\n- expires - optional, only if scope doesn't contain no_expiry\nThe explicit flow should be used by server-side applications, with special care taken to never leak client_secret. Client side applications should use the implicit flow.\n\nOnce you have authenticated a user once, regardless of flow, subsequent re-authorizations will occur without requiring user action. Naturally, should a user revoke an applications permissions then further action will be required to re-authorize.\n\nApplications using the implicit flow can make use of our provided minimalistic Javascript SDK.\n\n#Scope\n\nWith an empty scope, authentication will only allow an application to identify a user via the /me method. In order to access other information, different scope values must be sent. Multiple values may be sent in scope by comma or space delimitting them.\n\n- read_inbox - access a user's global inbox\n- no_expiry - access_token's with this scope do not expire\n- write_access - perform write operations as a user 2.1\n- private_info - access full history of a user's private actions on the site 2.1\n\n#Desktop Applications\n\nDesktop applications cannot participate directly in OAuth 2.0 flows, however the embeddable browser controls available in most frameworks make it possible to work around this limitation.\n\nDesktop applications should use the implicit client-side flow, hosting the process within a browser control. For redirect_uri, a value of https://stackexchange.com/oauth/login_success should be used. Upon a successful authentication, access_token will be placed in the url hash as with a standard implicit authentication.\n\n#Usage\n\nAccess tokens can be passed (as access_token) to any method to grant applications an increased throttle quota. When passing an access token an app must pass its request key as well, if you don't have a request key you can obtain one by registering your application on Stack Apps (http://stackapps.com/users/login?returnurl=/apps/oauth/register).\n",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://stackoverflow.com/oauth",
            "scopes": {}
          }
        },
        "type": "oauth2"
      }
    }
  }
}
